#include <iostream>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <vector>
#include <thread>
#include <chrono>
#include <mutex>
#include <cmath>
#include <G:\My Drive\My degrees and Courses\MEngg. (Computer Networks)\HK MEngg Thesis\Haptic Teleoperation (06-12-2024)\chai3d-3.2.0\external\glew\include\GL\glew.h>
#include <G:\My Drive\My degrees and Courses\MEngg. (Computer Networks)\HK MEngg Thesis\Haptic Teleoperation (06-12-2024)\freeglut\include\GL\freeglut.h>
#include "G:\My Drive\My degrees and Courses\MEngg. (Computer Networks)\HK MEngg Thesis\Haptic Teleoperation (06-12-2024)\chai3d-3.2.0\src\chai3d.h"

#pragma comment(lib, "ws2_32.lib")

#define SERVER_PORT 4000
#define BUFFER_SIZE 1024

std::mutex data_mutex;
double force_feedback = 0.0;
bool running = true;
std::vector<double> dataPoints;
using namespace chai3d;

cHapticDeviceHandler* handler;
cGenericHapticDevicePtr hapticDevice;

void initializeHapticDevice()
{
    handler = new cHapticDeviceHandler();
    handler->getDevice(hapticDevice, 0);
    if (hapticDevice)
    {
        hapticDevice->open();
        hapticDevice->calibrate();
    }
    else
    {
        std::cerr << "No haptic device found!" << std::endl;
        exit(1);
    }
}

void hapticFeedbackLoop()
{
    while (running)
    {
        {
            std::lock_guard<std::mutex> lock(data_mutex);
            if (hapticDevice)
            {
                cVector3d force(0.0, 0.0, force_feedback);
                hapticDevice->setForce(force);
            }
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(1));
    }
}

void receive_data(SOCKET sock)
{
    char buffer[BUFFER_SIZE];
    sockaddr_in senderAddr;
    int senderAddrSize = sizeof(senderAddr);

    while (running)
    {
        int bytesReceived = recvfrom(sock, buffer, BUFFER_SIZE, 0, (sockaddr*)&senderAddr, &senderAddrSize);
        if (bytesReceived > 0)
        {
            buffer[bytesReceived] = '\0';
            std::lock_guard<std::mutex> lock(data_mutex);

            double x, y, z;
            sscanf(buffer, "%lf %lf %lf", &x, &y, &z);
            force_feedback = sqrt(x * x + y * y + z * z);

            std::cout << "Received: X=" << x << " Y=" << y << " Z=" << z << " | Magnitude=" << force_feedback << "\n";

            dataPoints.push_back(force_feedback);
            if (dataPoints.size() > 50) dataPoints.erase(dataPoints.begin());
            glutPostRedisplay();
        }
    }
}

void display()
{
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0, 1.0, 1.0);
    glBegin(GL_LINES);
    glVertex2f(-1.0, -0.9);
    glVertex2f(1.0, -0.9);
    glEnd();

    glColor3f(0.0, 1.0, 0.0);
    float xStep = 2.0 / 50;
    for (size_t i = 0; i < dataPoints.size(); ++i)
    {
        float x = -1.0 + i * xStep;
        float barHeight = dataPoints[i] / 10.0;
        glBegin(GL_QUADS);
        glVertex2f(x, -0.9);
        glVertex2f(x + xStep * 0.8, -0.9);
        glVertex2f(x + xStep * 0.8, -0.9 + barHeight);
        glVertex2f(x, -0.9 + barHeight);
        glEnd();
    }
    glutSwapBuffers();
}

void initializeGraphics(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Haptic Data Visualization");
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glutDisplayFunc(display);
    glutMainLoop();
}

int main(int argc, char** argv)
{
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
    {
        std::cerr << "WSAStartup failed!\n";
        return 1;
    }

    initializeHapticDevice();

    SOCKET sock = socket(AF_INET, SOCK_DGRAM, 0);
    if (sock == INVALID_SOCKET)
    {
        std::cerr << "Socket creation failed!\n";
        WSACleanup();
        return 1;
    }

    sockaddr_in serverAddr;
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(SERVER_PORT);

    if (bind(sock, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR)
    {
        std::cerr << "Bind failed!\n";
        closesocket(sock);
        WSACleanup();
        return 1;
    }

    std::thread receiver(receive_data, sock);
    std::thread hapticThread(hapticFeedbackLoop);

    initializeGraphics(argc, argv);

    running = false;
    receiver.join();
    hapticThread.join();

    hapticDevice->close();
    delete handler;
    closesocket(sock);
    WSACleanup();
    return 0;
}
