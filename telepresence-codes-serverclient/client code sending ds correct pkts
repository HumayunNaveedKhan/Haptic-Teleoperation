
#include <winsock2.h>
#include <ws2tcpip.h>
#include <iostream>
#include <chrono>
#include <random>
#include <thread>
#include <iomanip> // For timestamp formatting
#include <sstream> // For stringstream in timestamp

// This should be defined before including winsock headers to avoid deprecated warnings
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#pragma comment(lib, "ws2_32.lib")

#define PACKET_SIZE 1  // For 3D Vector + delay (3 floats for vector + 1 float for delay)
#define SERVER_PORT 4000
#define MAX_PACKETS 100  // Control the number of packets to send (for testing)

// Structure to hold a 3D Vector and processing delay
struct Packet {
    int packetNumber;  // Sequential packet number
    float x, y, z;     // 3D Vector
    float delay;       // Processing delay in milliseconds
    std::string timestamp;  // Timestamp of when the packet was created
};

// Function to generate a random float in a given range
float generateRandomFloat(float min, float max) {
    static std::random_device rd;
    static std::mt19937 gen(rd());
    std::uniform_real_distribution<> dis(min, max);
    return dis(gen);
}

// Function to get the current timestamp
std::string getCurrentTimestamp() {
    auto now = std::chrono::system_clock::now();
    auto now_c = std::chrono::system_clock::to_time_t(now);
    std::tm timeinfo;
    if (localtime_s(&timeinfo, &now_c) == 0) {
        std::stringstream ss;
        ss << std::put_time(&timeinfo, "%Y-%m-%d %H:%M:%S");
        return ss.str();
    }
    else {
        // Handle error if needed
        return "";
    }
}

// Client function
void udpClient(const char* serverAddress) {
    // Initialize Winsock
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup failed: " << WSAGetLastError() << std::endl;
        return;
    }

    // Create a socket
    SOCKET clientSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (clientSocket == INVALID_SOCKET) {
        std::cerr << "Socket creation failed: " << WSAGetLastError() << std::endl;
        WSACleanup();
        return;
    }

    sockaddr_in serverAddressStruct;
    serverAddressStruct.sin_family = AF_INET;
    serverAddressStruct.sin_port = htons(SERVER_PORT);

    // Convert IP address from string to binary using inet_pton
    if (inet_pton(AF_INET, serverAddress, &serverAddressStruct.sin_addr) <= 0) {
        std::cerr << "Invalid address or address not supported" << std::endl;
        closesocket(clientSocket);
        WSACleanup();
        return;
    }

    Packet packet;
    int packetCounter = 1;

    while (packetCounter <= MAX_PACKETS) {
        // Generate random 3D vector
        packet.x = generateRandomFloat(-100.0f, 100.0f);
        packet.y = generateRandomFloat(-100.0f, 100.0f);
        packet.z = generateRandomFloat(-100.0f, 100.0f);

        // Measure processing delay (simulate delay calculation)
        auto start = std::chrono::high_resolution_clock::now();
        // Simulate some processing here (e.g., random delay)
        std::this_thread::sleep_for(std::chrono::milliseconds(rand() % 100));
        auto end = std::chrono::high_resolution_clock::now();

        // Calculate the processing delay in milliseconds
        std::chrono::duration<float> processingDuration = end - start;
        packet.delay = static_cast<float>(processingDuration.count() * 1000);  // convert to float

        // Attach timestamp to the packet
        packet.timestamp = getCurrentTimestamp();

        // Attach packet number
        packet.packetNumber = packetCounter;

        // Send the packet to the server
        int sendResult = sendto(clientSocket, reinterpret_cast<char*>(&packet), sizeof(packet), 0, reinterpret_cast<sockaddr*>(&serverAddressStruct), sizeof(serverAddressStruct));
        if (sendResult == SOCKET_ERROR) {
            std::cerr << "Send failed: " << WSAGetLastError() << std::endl;
            break;
        }

        // Print packet details for debugging
        std::cout << "Sent Packet #" << packet.packetNumber
            << " - x: " << packet.x << ", y: " << packet.y << ", z: " << packet.z
            << ", Delay: " << packet.delay << " ms"
            << ", Timestamp: " << packet.timestamp
            << ", Packet Size: " << sizeof(packet) << " bytes" << std::endl;

        // Sleep for a while before sending the next packet
        std::this_thread::sleep_for(std::chrono::milliseconds(500));  // Simulate packet generation rate

        // Increment packet counter
        packetCounter++;
    }

    // Clean up
    closesocket(clientSocket);
    WSACleanup();
}

int main() {
    const char* serverAddress = "127.0.0.1";  // Server address
    udpClient(serverAddress);
    return 0;
}
