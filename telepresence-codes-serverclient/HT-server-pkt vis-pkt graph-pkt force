#include <G:\My Drive\My degrees and Courses\MEngg. (Computer Networks)\HK MEngg Thesis\Haptic Teleoperation (06-12-2024)\chai3d-3.2.0\external\glew\include\GL\glew.h>  // GLEW should be included before any OpenGL headers
#include <G:\My Drive\My degrees and Courses\MEngg. (Computer Networks)\HK MEngg Thesis\Haptic Teleoperation (06-12-2024)\chai3d-3.2.0\extras\freeglut\include\GL\glut.h>  // OpenGL Utility Toolkit
#include <iostream>
#include <deque>
#include <vector>
#include <thread>
#include <mutex>
#include <chrono>
#include <cmath>
#include <cstring>
#include <sstream>
#include <winsock2.h>
#include <ws2tcpip.h>
#include "G:\My Drive\My degrees and Courses\MEngg. (Computer Networks)\HK MEngg Thesis\Haptic Teleoperation (06-12-2024)\chai3d-3.2.0\src\chai3d.h"

#pragma comment(lib, "ws2_32.lib") // Link Winsock library

#define UDP_PORT 4000
#define MAX_PACKET_SIZE 400
#define MAX_BUFFER_SIZE 1000  // Buffer size to hold 1000 packets
std::ostringstream ss;
//------------------------------------------------------------------------------
// CHAI3D GLOBALS
//------------------------------------------------------------------------------
// a world that contains all objects of the virtual environment
chai3d::cWorld* world;

// a camera to render the world in the window display
chai3d::cCamera* camera;

// a light source to illuminate the objects in the world
chai3d::cDirectionalLight* light;

// a haptic device handler
chai3d::cHapticDeviceHandler* handler;

// a pointer to the current haptic device
chai3d::cGenericHapticDevicePtr hapticDevice;

// a virtual tool representing the haptic device in the scene
chai3d::cToolCursor* tool;

// a font for rendering text
chai3d::cFontPtr font;

// a label to display the rate [Hz] at which the simulation is running
chai3d::cLabel* labelRates;

// a label to display packet information
chai3d::cLabel* labelPacketInfo;

// a flag to indicate if the haptic simulation currently running
bool simulationRunning = false;

// a flag to indicate if the haptic simulation has terminated
bool simulationFinished = false;

// display size of the window
int displayW = 8000;
int displayH = 6000;

// haptic thread frequency counter
double hapticFrequency = 0.0;
int hapticFrequencyCounter = 0;
chai3d::cPrecisionClock hapticFrequencyClock;

// graphic thread frequency counter
double graphicFrequency = 0.0;
int graphicFrequencyCounter = 0;
chai3d::cPrecisionClock graphicFrequencyClock;


// update rate for haptic rendering
double hapticRate = 1000.0;

// visualization objects
std::vector<chai3d::cShapeSphere*> packetSpheres;
const int MAX_VISIBLE_PACKETS = 100;
const double PACKET_SPHERE_RADIUS = 0.02;

//------------------------------------------------------------------------------
// PACKET STRUCTURE & GLOBALS
//------------------------------------------------------------------------------
// Common Packet Structure
struct Packet {
    int packetNumber;  // Sequential packet number
    float x, y, z;     // 3D Vector components
    float delay;       // Processing delay in milliseconds
    char timestamp[64];  // Timestamp of packet creation
    char srcIP[INET_ADDRSTRLEN]; // Source IP address
    char dstIP[INET_ADDRSTRLEN]; // Destination IP address
    int srcPort;       // Source port
    int dstPort;       // Destination port
};

std::deque<Packet> receivedPackets;  // Use deque for FIFO handling
std::mutex dataMutex;

// Control Parameters
const int bufferSize = MAX_BUFFER_SIZE;
const int udpPort = UDP_PORT;
const float packetScale = 0.1f;  // Scaling factor for packet magnitude

//------------------------------------------------------------------------------
// DECLARED FUNCTIONS
//------------------------------------------------------------------------------

// Function to initialize CHAI3D world and objects
void initializeWorld();

// Function to handle window resize
void resizeWindow(int w, int h);

// Function to render scene
void updateGraphics(void);

// Function to handle key press
void keySelect(unsigned char key, int x, int y);

// Function for haptic rendering
void updateHaptics(void);

// Function to close the application
void close(void);

// UDP server thread for receiving packets
void udpServer();

// Function to create a packet visualization sphere
chai3d::cShapeSphere* createPacketSphere(const Packet& packet);

// Function to update packet visualization
void updatePacketVisualization();

//------------------------------------------------------------------------------
// UDP SERVER IMPLEMENTATION
//------------------------------------------------------------------------------
void udpServer() {
    SOCKET udpSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (udpSocket == INVALID_SOCKET) {
        std::cerr << "Socket creation failed: " << WSAGetLastError() << std::endl;
        return;
    }

    sockaddr_in serverAddr = {};
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(udpPort);
    serverAddr.sin_addr.s_addr = INADDR_ANY;

    if (bind(udpSocket, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) == SOCKET_ERROR) {
        std::cerr << "Socket binding failed: " << WSAGetLastError() << std::endl;
        closesocket(udpSocket);
        return;
    }

    sockaddr_in clientAddr = {};
    int clientAddrLen = sizeof(clientAddr);
    Packet packet;

    while (simulationRunning) {
        int bytesReceived = recvfrom(udpSocket, reinterpret_cast<char*>(&packet), sizeof(packet), 0,
            reinterpret_cast<sockaddr*>(&clientAddr), &clientAddrLen);

        if (bytesReceived > 0 && bytesReceived <= MAX_PACKET_SIZE) {
            inet_ntop(AF_INET, &clientAddr.sin_addr, packet.srcIP, INET_ADDRSTRLEN);
            inet_ntop(AF_INET, &serverAddr.sin_addr, packet.dstIP, INET_ADDRSTRLEN);
            packet.srcPort = ntohs(clientAddr.sin_port);
            packet.dstPort = ntohs(serverAddr.sin_port);

            // Print packet details in a single line
            std::cout << "Pkt #" << packet.packetNumber << " | "
                << "Pos: (" << packet.x << ", " << packet.y << ", " << packet.z << ") | "
                << "Delay: " << packet.delay << " ms | "
                << "Timestamp: " << packet.timestamp << " | "
                << "Src: " << packet.srcIP << ":" << packet.srcPort << " -> "
                << "Dst: " << packet.dstIP << ":" << packet.dstPort << std::endl;

            // Add packet to deque for visualization
            std::lock_guard<std::mutex> lock(dataMutex);
            receivedPackets.push_back(packet);
            if (receivedPackets.size() > bufferSize) {
                receivedPackets.pop_front();
            }
        }
    }

    closesocket(udpSocket);
}

//------------------------------------------------------------------------------
// VISUALIZATION FUNCTIONS
//------------------------------------------------------------------------------
chai3d::cShapeSphere* createPacketSphere(const Packet& packet) {
    // Create a new sphere for the packet
    chai3d::cShapeSphere* sphere = new chai3d::cShapeSphere(PACKET_SPHERE_RADIUS);

    // Set position based on packet data (scaled)
    sphere->setLocalPos(packet.x * packetScale, packet.y * packetScale, packet.z * packetScale);

    // Color based on packet number (create a rainbow effect)
    double hue = fmod(packet.packetNumber * 0.01, 1.0);
    chai3d::cColorf color;
    //color(1.0, 1.0, 1.0);
    sphere->m_material->setColor(color);

    // Set transparency based on age (older packets are more transparent)
    sphere->m_material->setTransparencyLevel(0.7);

    return sphere;
}

void updatePacketVisualization() {
    std::lock_guard<std::mutex> lock(dataMutex);

    // Remove old packet spheres if we have too many
    while (packetSpheres.size() > MAX_VISIBLE_PACKETS) {
        if (packetSpheres[0] != nullptr) {
            world->removeChild(packetSpheres[0]);
            delete packetSpheres[0];
        }
        packetSpheres.erase(packetSpheres.begin());
    }

    // Add any new packets that have been received
    while (packetSpheres.size() < std::min(static_cast<size_t>(MAX_VISIBLE_PACKETS), receivedPackets.size())) {
        size_t index = receivedPackets.size() - packetSpheres.size() - 1;
        chai3d::cShapeSphere* sphere = createPacketSphere(receivedPackets[index]);
        world->addChild(sphere);
        packetSpheres.push_back(sphere);
    }

    // Update packet info label with latest packet data
    if (!receivedPackets.empty()) {
        const Packet& packet = receivedPackets.back();
        std::stringstream ss;
        ss << "Packet #" << packet.packetNumber
            << " | Pos: (" << packet.x << ", " << packet.y << ", " << packet.z << ")"
            << " | Delay: " << packet.delay << " ms"
            << " | " << packet.srcIP << ":" << packet.srcPort
            << " -> " << packet.dstIP << ":" << packet.dstPort;
        labelPacketInfo->setText(ss.str());
    }
}

//------------------------------------------------------------------------------
// CHAI3D FUNCTIONS
//------------------------------------------------------------------------------
void initializeWorld() {
    // Create a new world
    world = new chai3d::cWorld();

    // Set background color
    world->m_backgroundColor.setBlack();

    // Create a camera and insert it into the virtual world
    camera = new chai3d::cCamera(world);

    // Set the camera position
    camera->set(chai3d::cVector3d(0.0, 0.0, 0.5),    // Camera position
        chai3d::cVector3d(0.0, 0.0, 0.0),     // Look at position
        chai3d::cVector3d(0.0, 1.0, 0.0));    // Up direction vector

    // Set the near and far clipping planes
    camera->setClippingPlanes(0.01, 10.0);

    // Set field of view
    camera->setFieldViewAngleDeg(45);

    // Optional: set camera properties as needed
    camera->setUseMultipassTransparency(true);

    // If you're using a cWorld object, add the camera to it
    if (world != nullptr) {
        world->addChild(camera);

        // Create a light source and attach it to the camera
        light = new chai3d::cDirectionalLight(world);
        world->addChild(light);

        // Enable light source
        light->setEnabled(true);

        // Define the direction of the light beam
        light->setDir(-1.0, 0.0, -0.4);

        // Create a font
        font = chai3d::NEW_CFONTCALIBRI20();

        // Create a label to display the haptic and graphic rate
        labelRates = new chai3d::cLabel(font);
        camera->m_frontLayer->addChild(labelRates);

        // Create a label for packet information
        labelPacketInfo = new chai3d::cLabel(font);
        labelPacketInfo->setLocalPos(10, 30, 0);
        camera->m_frontLayer->addChild(labelPacketInfo);

        // Create a ground plane
        chai3d::cMesh* ground = new chai3d::cMesh();
        world->addChild(ground);

        // Create plane
        chai3d::cCreatePlane(ground, 1.0, 1.0),
            chai3d::cVector3d(0.0, 0.0, 0.0),
            chai3d::cVector3d(0.0, 0.0, 1.0);

        // Create some texture
        chai3d::cTexture2dPtr texture = chai3d::cTexture2d::create();
        bool fileLoaded = texture->loadFromFile("G:\My Drive\My degrees and Courses\MEngg. (Computer Networks)\HK MEngg Thesis\Haptic Teleoperation (06-12-2024)\chai3d-3.2.0\bin\resources\images\canvas.jpg");
        if (!fileLoaded) {
            std::cout << "Warning: Failed to load texture file!" << std::endl;
            ground->m_material->setBlue();
        }
        else {
            ground->setTexture(texture);
            ground->setUseTexture(true);
            ground->m_material->setWhite();
        }

        // Create display axes
        chai3d::cMesh* axes = new chai3d::cMesh();
        world->addChild(axes);

        // X axis (red)
        chai3d::cCreateArrow(axes, 0.3, 0.003, 0.02, 0.05),
            chai3d::cVector3d(0, 0, 0),
            chai3d::cVector3d(0.3, 0, 0),
            chai3d::cColorf(1, 0, 0);

        // Y axis (green)
        chai3d::cCreateArrow(axes, 0.3, 0.003, 0.02, 0.05),
            chai3d::cVector3d(0, 0, 0),
            chai3d::cVector3d(0, 0.3, 0),
            chai3d::cColorf(0, 1, 0);

        // Z axis (blue)
        chai3d::cCreateArrow(axes, 0.3, 0.003, 0.02, 0.05),
            chai3d::cVector3d(0, 0, 0),
            chai3d::cVector3d(0, 0, 0.3),
            chai3d::cColorf(0, 0, 1);

        // Create haptic device handler
        handler = new chai3d::cHapticDeviceHandler();

        // Get access to the first available haptic device
        handler->getDevice(hapticDevice, 0);

        // Retrieve information about the haptic device
        chai3d::cHapticDeviceInfo hapticDeviceInfo = hapticDevice->getSpecifications();

        // Create a tool (cursor) and insert into the world
        tool = new chai3d::cToolCursor(world);
        world->addChild(tool);

        // Connect the haptic device to the virtual tool
        tool->setHapticDevice(hapticDevice);

        // Define a radius for the tool
        double toolRadius = 0.03;

        // Define a scale factor between the physical workspace of the haptic
        // device and the virtual workspace
        tool->setWorkspaceRadius(0.7);

        // Define a scale factor between the physical workspace of the haptic
        // device and the virtual workspace
        tool->setWorkspaceScaleFactor(2.0);

        // Create a spherical tool tip with haptic effects
        chai3d::cShapeSphere* sphereTool = new chai3d::cShapeSphere(toolRadius);
        tool->addChild(sphereTool);
        tool->setLocalPos(0.0, 0.0, 0.0);

        // Set material properties for the tool
        sphereTool->m_material->setWhite();
        sphereTool->m_material->setStiffness(0.3 * hapticDeviceInfo.m_maxLinearStiffness);
        sphereTool->m_material->setViscosity(0.1 * hapticDeviceInfo.m_maxLinearDamping);

        // Set force rendering algorithm
        //tool->setUseForceField(true);

        // Start haptic device
        hapticDevice->open();

        // Initialize haptic rate calculation
        hapticFrequencyClock.reset();
        hapticFrequencyCounter = 0;
    }

    void updateGraphics(void) {
        // Update frequency counter
        graphicFrequencyCounter++;
        double time = graphicFrequencyClock.getCurrentTimeSeconds();
        if (time >= 1.0) {
            graphicFrequency = (double)graphicFrequencyCounter / time;
            graphicFrequencyCounter = 0;
            graphicFrequencyClock.reset();
        }

        // Update packet visualization
        updatePacketVisualization();

        else if (camera != nullptr) {
            camera->renderView(displayW, displayH);
        }
        else {
            std::cerr << "Error: Camera not initialized!" << std::endl;
            // Handle error appropriately
        }

        // Update stats
        ss << "Haptic Rate: " << hapticFrequency << " Hz | "
            << "Graphic Rate: " << graphicFrequency << " Hz | "
            << "Packets: " << static_cast<int>(receivedPackets.size());
        std::string rateInfo = ss.str();
        labelRates->setText(rateInfo);

        // Update position of label based on window size
        labelRates->setLocalPos((displayW - labelRates->getWidth()) / 2, 15);

        // Swap buffers
        glutSwapBuffers();

        // Wait until all OpenGL commands are completed
        glFinish();

        // Check for errors
        GLenum err = glGetError();
        if (err != GL_NO_ERROR) {
            std::cout << "Error: " << gluErrorString(err) << std::endl;
        }
    }
}

void resizeWindow(int w, int h) {
    // Update window size
    displayW = w;
    displayH = h;

    // Update display viewport
    glViewport(0, 0, displayW, displayH);

    // Set camera's aspect ratio - fixed the method call
    double aspectRatio = static_cast<double>(displayW) / static_cast<double>(displayH);
    //camera->m_fieldViewAngleRad = 2.0 * atan(tan(camera->m_fieldViewAngleRad / 2.0) * aspectRatio);
}

void keySelect(unsigned char key, int x, int y) {
    // Handle key press
    switch (key) {
        // Exit
    case 27:
        close();
        break;

        // Reset camera view
    case 'r':
        camera->set(chai3d::cVector3d(0.5, 0.0, 0.2),    // Camera position
            chai3d::cVector3d(0.0, 0.0, 0.0),    // Look at position
            chai3d::cVector3d(0.0, 0.0, 1.0));   // Up direction
        break;

        // Toggle wireframe rendering
    case 'w':
        camera->setWireMode(!camera->getWireMode());
        break;
    }
}

void close(void) {
    // Stop simulation
    simulationRunning = false;

    // Wait for haptic thread to finish
    while (!simulationFinished) {
        chai3d::cSleepMs(100);
    }

    // Close haptic device
    hapticDevice->close();

    // Exit GLUT
    exit(0);
}

void updateHaptics(void) {
    // Simulation clock initialization
    chai3d::cPrecisionClock simulationClock;
    simulationClock.reset();

    // Main haptic simulation loop
    while (simulationRunning) {
        // Update frequency counter
        hapticFrequencyCounter++;
        double time = hapticFrequencyClock.getCurrentTimeSeconds();
        if (time >= 1.0) {
            hapticFrequency = (double)hapticFrequencyCounter / time;
            hapticFrequencyCounter = 0;
            hapticFrequencyClock.reset();
        }

        // Read position from haptic device
        chai3d::cVector3d position;
        hapticDevice->getPosition(position);

        // Update tool position and orientation
        tool->updateFromDevice();

        // Calculate interaction forces between tool and latest packet
        tool->computeInteractionForces();

        // Check for force feedback with the latest packet
        {
            std::lock_guard<std::mutex> lock(dataMutex);
            if (!receivedPackets.empty()) {
                const Packet& latestPacket = receivedPackets.back();

                // Calculate force based on distance to latest packet
                chai3d::cVector3d packetPos(
                    latestPacket.x * packetScale,
                    latestPacket.y * packetScale,
                    latestPacket.z * packetScale
                );

                chai3d::cVector3d forceDirection = packetPos - tool->getLocalPos();
                double distance = forceDirection.length();

                // If close enough, apply attraction force
                if (distance < 0.15 && distance > 0.001) {
                    forceDirection.normalize();
                    double forceMagnitude = 1.0 * (0.15 - distance);
                    chai3d::cVector3d force = forceMagnitude * forceDirection;

                    // Apply force to haptic device
                    tool->addDeviceLocalForce(force);
                }
            }
        }

        // Send forces to haptic device
        tool->applyToDevice();

        // Sleep to reduce CPU usage
        chai3d::cSleepMs(1);
    }

    // Report that simulation has ended
    simulationFinished = true;
}

//------------------------------------------------------------------------------
// MAIN FUNCTION
//------------------------------------------------------------------------------
int main(int argc, char* argv[]) {
    // Initialize WSOCK
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup failed" << std::endl;
        return -1;
    }

    // Initialize GLUT
    glutInit(&argc, argv);

    // Display properties
    glutInitDisplayMode(GLUT_RGB | GLUT_DEPTH | GLUT_DOUBLE);

    // Set window position and size
    glutInitWindowPosition(100, 100);
    glutInitWindowSize(displayW, displayH);

    // Create window
    glutCreateWindow("CHAI3D Haptic Packet Visualizer");

    // Register callback functions
    glutDisplayFunc(updateGraphics);
    glutReshapeFunc(resizeWindow);
    glutKeyboardFunc(keySelect);
    glutIdleFunc(updateGraphics);

    // Setup OpenGL
    glEnable(GL_DEPTH_TEST);
    glDisable(GL_CULL_FACE);
    glEnable(GL_NORMALIZE);
    glShadeModel(GL_SMOOTH);

    // Initialize CHAI3D world
    initializeWorld();

    // Set simulation running flag
    simulationRunning = true;

    // Create threads for haptic rendering and UDP server
    std::thread hapticThread(updateHaptics);
    std::thread networkThread(udpServer);

    // Start the GLUT main loop
    glutMainLoop();

    // Close everything
    simulationRunning = false;
    hapticThread.join();
    networkThread.join();
    WSACleanup();

    // Exit
    return 0;
}
