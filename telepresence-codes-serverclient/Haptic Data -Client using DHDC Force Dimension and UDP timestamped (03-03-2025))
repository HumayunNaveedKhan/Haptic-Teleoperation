#include <iostream>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <cstring>
#include <ctime>
#include <chrono>
#include <thread>
#include "C:\Program Files\Force Dimension\sdk-3.17.1\include\dhdc.h"  // Force Dimension SDK
#pragma comment(lib, "ws2_32.lib")

// Packet structure definition
struct Packet {
    int packetNumber;
    float x, y, z;
    float delay;
    char timestamp[64];
    char srcIP[INET_ADDRSTRLEN];
    char dstIP[INET_ADDRSTRLEN];
    int srcPort;
    int dstPort;
};

// Function to get current timestamp in a specific format
void getTimestamp(char* timestamp) {
    time_t now = time(0);
    struct tm tstruct;
    localtime_s(&tstruct, &now);  // Use localtime_s instead of localtime
    strftime(timestamp, 64, "%Y-%m-%d %X", &tstruct);
}

int main() {
    // Configurable parameters
    char srcIP[] = "127.0.0.1";  // Source IP address
    char dstIP[] = "192.168.168.136"; // Destination IP address (Correct format)
    int srcPort = 1000;  // Source port
    int dstPort = 4000;  // Destination port
    int numPackets = 100;  // Number of packets to send
    int delayBetweenPackets = 1000;  // Delay in milliseconds between packets
    int packetSize = sizeof(Packet);  // Size of the packet structure

    WSADATA wsaData;
    SOCKET clientSocket;
    sockaddr_in serverAddr;
    Packet packet;

    // Initialize Winsock
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup failed with error: " << WSAGetLastError() << std::endl;
        return 1;
    }

    // Create the UDP client socket
    clientSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (clientSocket == INVALID_SOCKET) {
        std::cerr << "Socket creation failed with error: " << WSAGetLastError() << std::endl;
        WSACleanup();
        return 1;
    }

    // Set up the server address structure
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(dstPort);
    if (inet_pton(AF_INET, dstIP, &serverAddr.sin_addr) <= 0) {
        std::cerr << "Invalid address or address not supported" << std::endl;
        closesocket(clientSocket);
        WSACleanup();
        return 1;
    }

    // Initialize the haptic device
    if (dhdOpen() < 0) {
        std::cerr << "Error: Cannot open haptic device (" << dhdErrorGetLastStr() << ")" << std::endl;
        closesocket(clientSocket);
        WSACleanup();
        return 1;
    }

    std::cout << "Haptic device initialized successfully!" << std::endl;

    // Loop to create and send packets
    for (int i = 1; i <= numPackets; ++i) {
        double hx, hy, hz;

        // Get haptic device position
        if (dhdGetPosition(&hx, &hy, &hz) < 0) {
            std::cerr << "Error getting haptic position: " << dhdErrorGetLastStr() << std::endl;
            break;
        }

        // Set up the packet data
        packet.packetNumber = i;
        packet.x = static_cast<float>(hx);  // Haptic X position
        packet.y = static_cast<float>(hy);  // Haptic Y position
        packet.z = static_cast<float>(hz);  // Haptic Z position
        packet.delay = 1.0f;
        getTimestamp(packet.timestamp);
        strcpy_s(packet.srcIP, srcIP);
        strcpy_s(packet.dstIP, dstIP);
        packet.srcPort = srcPort;
        packet.dstPort = dstPort;

        // Print packet details
        std::cout << "Sending Packet #" << i << std::endl;
        std::cout << "Source IP: " << packet.srcIP << ", Source Port: " << packet.srcPort << std::endl;
        std::cout << "Destination IP: " << packet.dstIP << ", Destination Port: " << packet.dstPort << std::endl;
        std::cout << "Packet Number: " << packet.packetNumber << std::endl;
        std::cout << "Haptic Position -> x: " << packet.x << ", y: " << packet.y << ", z: " << packet.z << std::endl;
        std::cout << "Timestamp: " << packet.timestamp << std::endl;
        std::cout << "----------------------------------------" << std::endl;

        // Send the packet to the server
        int sendResult = sendto(clientSocket, reinterpret_cast<char*>(&packet), packetSize, 0,
            (sockaddr*)&serverAddr, sizeof(serverAddr));

        if (sendResult == SOCKET_ERROR) {
            std::cerr << "Send failed with error: " << WSAGetLastError() << std::endl;
        }
        else {
            std::cout << "Packet " << i << " sent successfully!" << std::endl;
        }

        // Delay between packets
        std::this_thread::sleep_for(std::chrono::milliseconds(delayBetweenPackets));
    }

    // Close the haptic device
    dhdClose();

    // Clean up and close the socket
    closesocket(clientSocket);
    WSACleanup();

    return 0;
}
