#include <iostream>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <cstring>
#include <ctime>
#include <chrono>
#include <thread>
#include <atomic>
#include "C:\Program Files\Force Dimension\sdk-3.17.1\include\dhdc.h"  // Force Dimension SDK
#pragma comment(lib, "ws2_32.lib")

// Packet structure definition
struct Packet {
    int packetNumber;
    float x, y, z;
    float delay;
    char timestamp[64];
    char srcIP[INET_ADDRSTRLEN];
    char dstIP[INET_ADDRSTRLEN];
    int srcPort;
    int dstPort;
};

// Global delay control variable
std::atomic<float> globalDelay(1.0f);

// Function to get current timestamp in a specific format
void getTimestamp(char* timestamp) {
    time_t now = time(0);
    struct tm tstruct;
    localtime_s(&tstruct, &now);
    strftime(timestamp, 64, "%Y-%m-%d %X", &tstruct);
}

// Haptic data transmission function (High-priority thread)
void sendHapticData(SOCKET clientSocket, sockaddr_in serverAddr, char* srcIP, char* dstIP, int srcPort, int dstPort) {
    Packet packet;
    int packetCount = 0;
    constexpr int packetSize = sizeof(Packet);

    // Set thread priority to high
    SetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_HIGHEST);

    while (true) {
        double hx, hy, hz;

        // Get haptic device position
        if (dhdGetPosition(&hx, &hy, &hz) < 0) {
            std::cerr << "Error getting haptic position: " << dhdErrorGetLastStr() << std::endl;
            break;
        }

        // Set up the packet data
        packet.packetNumber = ++packetCount;
        packet.x = static_cast<float>(hx);
        packet.y = static_cast<float>(hy);
        packet.z = static_cast<float>(hz);
        packet.delay = globalDelay.load();
        getTimestamp(packet.timestamp);
        strcpy_s(packet.srcIP, srcIP);
        strcpy_s(packet.dstIP, dstIP);
        packet.srcPort = srcPort;
        packet.dstPort = dstPort;

        // Send the packet to the server
        int sendResult = sendto(clientSocket, reinterpret_cast<char*>(&packet), packetSize, 0,
            (sockaddr*)&serverAddr, sizeof(serverAddr));

        if (sendResult == SOCKET_ERROR) {
            std::cerr << "Send failed with error: " << WSAGetLastError() << std::endl;
        }

        // Enforce 1000 Hz rate (1 ms delay)
        std::this_thread::sleep_for(std::chrono::milliseconds(1));
    }
}

int main() {
    // Configurable parameters
    char srcIP[] = "127.0.0.1";
    char dstIP[] = "192.168.168.136";
    int srcPort = 1000;
    int dstPort = 4000;

    WSADATA wsaData;
    SOCKET clientSocket;
    sockaddr_in serverAddr;

    // Initialize Winsock
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup failed with error: " << WSAGetLastError() << std::endl;
        return 1;
    }

    // Create the UDP client socket
    clientSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (clientSocket == INVALID_SOCKET) {
        std::cerr << "Socket creation failed with error: " << WSAGetLastError() << std::endl;
        WSACleanup();
        return 1;
    }

    // Set up the server address structure
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(dstPort);
    if (inet_pton(AF_INET, dstIP, &serverAddr.sin_addr) <= 0) {
        std::cerr << "Invalid address or address not supported" << std::endl;
        closesocket(clientSocket);
        WSACleanup();
        return 1;
    }

    // Initialize the haptic device
    if (dhdOpen() < 0) {
        std::cerr << "Error: Cannot open haptic device (" << dhdErrorGetLastStr() << ")" << std::endl;
        closesocket(clientSocket);
        WSACleanup();
        return 1;
    }

    std::cout << "Haptic device initialized successfully!" << std::endl;

    // Start the high-priority haptic data transmission thread
    std::thread hapticThread(sendHapticData, clientSocket, serverAddr, srcIP, dstIP, srcPort, dstPort);

    // Wait for user input to terminate
    std::cout << "Press Enter to stop..." << std::endl;
    std::cin.get();

    // Clean up
    dhdClose();
    closesocket(clientSocket);
    WSACleanup();

    // Join the thread before exiting
    hapticThread.join();

    return 0;
}
