#include <iostream>
#include <vector>
#include <thread>
#include <mutex>
#include <deque>
#include <cstring>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <GL/glut.h>
#include <sstream>
#include <cmath>
#include <chrono>
#include <algorithm>

#pragma comment(lib, "ws2_32.lib")
#define UDP_PORT 4000
#define MAX_PACKET_SIZE 400

// Common Packet Structure
struct Packet {
    int packetNumber;  // Sequential packet number
    float x, y, z;     // 3D Vector components
    float delay;       // Processing delay in milliseconds
    char timestamp[64];  // Timestamp of packet creation
};

std::deque<Packet> receivedPackets;  // Use deque for FIFO handling
std::mutex dataMutex;

// Global variables for frame rate control
std::chrono::time_point<std::chrono::steady_clock> lastRefreshTime;
const std::chrono::milliseconds refreshInterval(33);  // ~30 FPS
const size_t MAX_BARS = 30;  // Max number of packets to display

// UDP server thread for receiving packets
void udpServer() {
    SOCKET udpSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (udpSocket == INVALID_SOCKET) {
        std::cerr << "Socket creation failed: " << WSAGetLastError() << std::endl;
        return;
    }

    sockaddr_in serverAddr = {};
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(UDP_PORT);
    serverAddr.sin_addr.s_addr = INADDR_ANY;

    if (bind(udpSocket, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) == SOCKET_ERROR) {
        std::cerr << "Socket binding failed: " << WSAGetLastError() << std::endl;
        closesocket(udpSocket);
        return;
    }

    sockaddr_in clientAddr = {};
    int clientAddrLen = sizeof(clientAddr);
    Packet packet;

    while (true) {
        int bytesReceived = recvfrom(udpSocket, reinterpret_cast<char*>(&packet), sizeof(packet), 0, reinterpret_cast<sockaddr*>(&clientAddr), &clientAddrLen);

        if (bytesReceived > 0 && bytesReceived <= MAX_PACKET_SIZE) {
            std::lock_guard<std::mutex> lock(dataMutex);
            receivedPackets.push_back(packet);
            if (receivedPackets.size() > MAX_BARS) {
                receivedPackets.pop_front();  // Implement FIFO: remove oldest packet
            }

            // Debugging information (optional)
            char clientIP[INET_ADDRSTRLEN];
            inet_ntop(AF_INET, &clientAddr.sin_addr, clientIP, INET_ADDRSTRLEN);

            std::stringstream ss;
            ss << "Packet from " << clientIP << " - "
                << "#" << packet.packetNumber << " [x: " << packet.x
                << ", y: " << packet.y << ", z: " << packet.z << "]"
                << ", Delay: " << packet.delay << " ms, Timestamp: " << packet.timestamp;

            std::cout << ss.str() << std::endl;
        }
    }

    closesocket(udpSocket);
}

// Function to calculate the magnitude of a packet
float calculateMagnitude(const Packet& packet) {
    return sqrt(packet.x * packet.x + packet.y * packet.y + packet.z * packet.z);
}

// OpenGL function to draw the XY plot for visualizing packet data
void drawXYPlot() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Set up projection matrix for normalized coordinates
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, 1.0, 0.0, 1.0);

    // Draw axes
    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_LINES);
    // X-axis
    glVertex2f(0.05f, 0.05f);
    glVertex2f(0.95f, 0.05f);
    // Y-axis
    glVertex2f(0.05f, 0.05f);
    glVertex2f(0.05f, 0.95f);
    glEnd();

    // Draw bars representing packets
    glColor3f(0.0f, 1.0f, 0.0f);
    glBegin(GL_QUADS);
    {
        std::lock_guard<std::mutex> lock(dataMutex);

        // Draw the bars for the packets, ensuring only the latest MAX_BARS packets are displayed
        for (size_t i = 0; i < receivedPackets.size(); ++i) {
            float x = 0.05f + static_cast<float>(i) / MAX_BARS;  // Adjust X position based on max bars
            float magnitude = calculateMagnitude(receivedPackets[i]) / 200.0f;  // Normalize magnitude for smaller heights

            // Ensure magnitude doesn't exceed plot height
            magnitude = std::min<float>(magnitude, 0.9f);

            glVertex2f(x, 0.05f);
            glVertex2f(x + 0.01f, 0.05f);  // Adjusted bar width
            glVertex2f(x + 0.01f, 0.05f + magnitude);
            glVertex2f(x, 0.05f + magnitude);
        }
    }
    glEnd();
}

// Function to display packet info in the top-right corner
void displayPacketInfo() {
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, 1.0, 0.0, 1.0);

    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_QUADS);
    glVertex2f(0.7f, 0.6f);
    glVertex2f(0.99f, 0.6f);
    glVertex2f(0.99f, 0.99f);
    glVertex2f(0.7f, 0.99f);
    glEnd();

    glColor3f(0.0f, 0.0f, 0.0f);
    glRasterPos2f(0.72f, 0.95f);
    for (const char& c : "Packet#  IP        Magnitude  Port#  Timestamp") {
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12, c);
    }

    std::lock_guard<std::mutex> lock(dataMutex);
    for (size_t i = 0; i < receivedPackets.size(); ++i) {
        char buffer[128];
        snprintf(buffer, sizeof(buffer), "%-7d %-10s %-9.2f %-5d %s",
            receivedPackets[i].packetNumber, "127.0.0.1", calculateMagnitude(receivedPackets[i]), UDP_PORT, receivedPackets[i].timestamp);

        glRasterPos2f(0.72f, 0.93f - 0.03f * i);
        for (const char& c : buffer) {
            glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12, c);
        }
    }
}

// Combined display function
void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    drawXYPlot();
    displayPacketInfo();
    glutSwapBuffers();
}

// Function to handle frame rate control
void idleFunction() {
    auto now = std::chrono::steady_clock::now();
    if (now - lastRefreshTime >= refreshInterval) {
        lastRefreshTime = now;
        glutPostRedisplay();
    }
}

int main(int argc, char** argv) {
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup failed" << std::endl;
        return -1;
    }

    std::thread udpThread(udpServer);

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(1920, 1080);
    glutCreateWindow("Packet Visualization");
    glClearColor(0.1f, 0.1f, 0.1f, 1.0f);

    glutDisplayFunc(display);
    glutIdleFunc(idleFunction);

    glutMainLoop();

    udpThread.join();
    WSACleanup();
    return 0;
}
