#include <iostream>
#include <vector>
#include <thread>
#include <mutex>
#include <cstring>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <GL/glut.h>
#include <sstream>
#include <cmath>
#include <chrono>

#pragma comment(lib, "ws2_32.lib")
#define UDP_PORT 4000

// Common Packet Structure
struct Packet {
    int packetNumber;  // Sequential packet number
    float x, y, z;     // 3D Vector components
    float delay;       // Processing delay in milliseconds
    char timestamp[64]; // Timestamp of packet creation
    char clientIP[INET_ADDRSTRLEN]; // IP address of the client
    int port;          // Port number of the client
};

std::vector<Packet> receivedPackets;
std::mutex dataMutex;

// Global variables for frame rate control
std::chrono::time_point<std::chrono::steady_clock> lastRefreshTime;
const std::chrono::milliseconds refreshInterval(33);  // ~30 FPS

void udpServer() {
    SOCKET udpSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (udpSocket == INVALID_SOCKET) {
        std::cerr << "Socket creation failed: " << WSAGetLastError() << std::endl;
        return;
    }

    sockaddr_in serverAddr = {};
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(UDP_PORT);
    serverAddr.sin_addr.s_addr = INADDR_ANY;

    if (bind(udpSocket, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) == SOCKET_ERROR) {
        std::cerr << "Socket binding failed: " << WSAGetLastError() << std::endl;
        closesocket(udpSocket);
        return;
    }

    sockaddr_in clientAddr = {};
    int clientAddrLen = sizeof(clientAddr);
    Packet packet;

    while (true) {
        int bytesReceived = recvfrom(udpSocket, reinterpret_cast<char*>(&packet), sizeof(packet), 0, reinterpret_cast<sockaddr*>(&clientAddr), &clientAddrLen);

        if (bytesReceived > 0) {
            std::lock_guard<std::mutex> lock(dataMutex);
            inet_ntop(AF_INET, &clientAddr.sin_addr, packet.clientIP, INET_ADDRSTRLEN);
            packet.port = ntohs(clientAddr.sin_port);

            receivedPackets.push_back(packet);
            if (receivedPackets.size() > 100) {
                receivedPackets.erase(receivedPackets.begin());
            }

            std::stringstream ss;
            ss << "Packet from " << packet.clientIP << ":" << packet.port << " - "
                << "#" << packet.packetNumber << " [x: " << packet.x
                << ", y: " << packet.y << ", z: " << packet.z << "]"
                << ", Delay: " << packet.delay << " ms, Timestamp: " << packet.timestamp;

            std::cout << ss.str() << std::endl;
        }
    }

    closesocket(udpSocket);
}

// Function to calculate the magnitude of a packet
float calculateMagnitude(const Packet& packet) {
    return sqrt(packet.x * packet.x + packet.y * packet.y + packet.z * packet.z);
}

// Function to draw the X-Y plot
void drawXYPlot() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Set up projection matrix for normalized coordinates
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, 1.0, 0.0, 1.0);

    // Draw axes
    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_LINES);
    // X-axis
    glVertex2f(0.05f, 0.05f);
    glVertex2f(0.95f, 0.05f);
    // Y-axis
    glVertex2f(0.05f, 0.05f);
    glVertex2f(0.05f, 0.95f);
    glEnd();

    // Draw axis labels and scales
    glRasterPos2f(0.95f, 0.02f);
    for (const char& c : "Time (ms)") {
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12, c);
    }
    glRasterPos2f(0.01f, 0.95f);
    for (const char& c : "Magnitude") {
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12, c);
    }

    // Draw scales on the axes
    glColor3f(0.5f, 0.5f, 0.5f);
    for (float i = 0.1f; i < 1.0f; i += 0.1f) {
        glBegin(GL_LINES);
        glVertex2f(0.05f, i);
        glVertex2f(0.055f, i);
        glVertex2f(i, 0.05f);
        glVertex2f(i, 0.055f);
        glEnd();
    }

    // Draw bars representing packets
    glColor3f(0.0f, 1.0f, 0.0f);
    glBegin(GL_QUADS);
    {
        std::lock_guard<std::mutex> lock(dataMutex);
        for (size_t i = 0; i < receivedPackets.size(); ++i) {
            float x = 0.1f + static_cast<float>(i) / 100.0f;
            float magnitude = calculateMagnitude(receivedPackets[i]) / 100.0f;  // Normalize magnitude

            // Ensure magnitude doesn't exceed plot height
            magnitude = (magnitude, 0.9f);

            glVertex2f(x, 0.05f);
            glVertex2f(x + 0.008f, 0.05f);
            glVertex2f(x + 0.008f, 0.05f + magnitude);
            glVertex2f(x, 0.05f + magnitude);
        }
    }
    glEnd();
}

// Function to display packet info in the top-right corner
void displayPacketInfo() {
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, 1.0, 0.0, 1.0);

    glColor3f(1.0f, 1.0f, 1.0f);

    // Draw static headers for packet info
    glRasterPos2f(0.7f, 0.9f);
    std::string headers = "Packet#  IP Address       Magnitude  Port#  Timestamp";
    for (const char& c : headers) {
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12, c);
    }

    // Display dynamic packet information
    std::lock_guard<std::mutex> lock(dataMutex);
    for (size_t i = 0; i < receivedPackets.size(); ++i) {
        std::stringstream packetInfo;
        packetInfo << receivedPackets[i].packetNumber << "    "
            << receivedPackets[i].clientIP << " "
            << calculateMagnitude(receivedPackets[i]) << "    "
            << receivedPackets[i].port << "    "
            << receivedPackets[i].timestamp;

        glRasterPos2f(0.7f, 0.88f - 0.02f * (i + 1));
        std::string info = packetInfo.str();
        for (const char& c : info) {
            glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12, c);
        }
    }
}

// Combined display function
void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    drawXYPlot();
    displayPacketInfo();
    glutSwapBuffers();
}

// Function to handle frame rate control
void idleFunction() {
    auto now = std::chrono::steady_clock::now();
    if (now - lastRefreshTime >= refreshInterval) {
        lastRefreshTime = now;
        glutPostRedisplay();
    }
}

int main(int argc, char** argv) {
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup failed" << std::endl;
        return -1;
    }

    std::thread udpThread(udpServer);

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(1920, 1080);
    glutCreateWindow("Packet Visualization");
    glClearColor(0.1f, 0.1f, 0.1f, 1.0f);

    glutDisplayFunc(display);
    glutIdleFunc(idleFunction);

    glutMainLoop();

    udpThread.join();
    WSACleanup();
    return 0;
}
