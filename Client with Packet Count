#include <winsock2.h>
#include <ws2tcpip.h>
#include <iostream>
#include <chrono>
#include <thread>

#pragma comment(lib, "ws2_32.lib") // Link Winsock library

#define SERVER_IP "127.0.0.1" // Change to the server's IP address
#define SERVER_PORT 4000
#define PACKET_SIZE 500        // 2 bytes per packet
#define NUM_PACKETS 10       // Number of packets to send
#define SEND_INTERVAL 2000    // Interval between packets in milliseconds

void udpClient(const char* serverIp, int serverPort) {
    // Initialize Winsock
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup failed: " << WSAGetLastError() << std::endl;
        return;
    }

    // Create a socket
    SOCKET clientSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (clientSocket == INVALID_SOCKET) {
        std::cerr << "Socket creation failed: " << WSAGetLastError() << std::endl;
        WSACleanup();
        return;
    }

    // Configure server address
    sockaddr_in serverAddress;
    memset(&serverAddress, 0, sizeof(serverAddress));
    serverAddress.sin_family = AF_INET;
    serverAddress.sin_port = htons(serverPort);
    inet_pton(AF_INET, serverIp, &serverAddress.sin_addr);

    // Send packets
    for (int i = 1; i <= NUM_PACKETS; ++i) {
        // Prepare the packet
        char packet[PACKET_SIZE];
        packet[0] = i & 0xFF;         // Lower byte of packet number
        packet[1] = (i >> 8) & 0xFF; // Higher byte of packet number

        // Send the packet
        int sentBytes = sendto(
            clientSocket,
            packet,
            PACKET_SIZE,
            0,
            reinterpret_cast<sockaddr*>(&serverAddress),
            sizeof(serverAddress)
        );

        if (sentBytes == SOCKET_ERROR) {
            std::cerr << "sendto failed: " << WSAGetLastError() << std::endl;
            break;
        }

        std::cout << "Packet #" << i << " sent." << std::endl;

        // Wait before sending the next packet
        std::this_thread::sleep_for(std::chrono::milliseconds(SEND_INTERVAL));
    }

    // Clean up
    closesocket(clientSocket);
    WSACleanup();
}

int main() {
    udpClient(SERVER_IP, SERVER_PORT);
    return 0;
}
