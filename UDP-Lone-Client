#include <winsock2.h>
#include <ws2tcpip.h>
#include <iostream>
#include <string>

#pragma comment(lib, "ws2_32.lib") // Link Winsock library

#define BUFFER_SIZE 1024

void startUDPClient(const char* serverIP, int port) {
    // Initialize Winsock
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup failed: " << WSAGetLastError() << std::endl;
        exit(EXIT_FAILURE);
    }

    // Create a socket
    SOCKET clientSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (clientSocket == INVALID_SOCKET) {
        std::cerr << "Socket creation failed: " << WSAGetLastError() << std::endl;
        WSACleanup();
        exit(EXIT_FAILURE);
    }

    // Server address setup
    sockaddr_in serverAddress;
    memset(&serverAddress, 0, sizeof(serverAddress));
    serverAddress.sin_family = AF_INET;
    serverAddress.sin_port = htons(port);
    if (inet_pton(AF_INET, serverIP, &serverAddress.sin_addr) <= 0) {
        std::cerr << "Invalid IP address: " << serverIP << std::endl;
        closesocket(clientSocket);
        WSACleanup();
        exit(EXIT_FAILURE);
    }

    std::cout << "Connected to server at " << serverIP << ":" << port << std::endl;

    char buffer[BUFFER_SIZE];
    while (true) {
        // Get user input
        std::cout << "Enter message to send (or type 'exit' to quit): ";
        std::string message;
        std::getline(std::cin, message);

        if (message == "exit") {
            break;
        }

        // Send the message to the server
        int sentBytes = sendto(
            clientSocket,
            message.c_str(),
            static_cast<int>(message.size()),
            0,
            reinterpret_cast<sockaddr*>(&serverAddress),
            sizeof(serverAddress)
        );

        if (sentBytes == SOCKET_ERROR) {
            std::cerr << "sendto failed: " << WSAGetLastError() << std::endl;
            break;
        }

        // Receive response from server
        sockaddr_in fromAddress;
        int fromAddressLen = sizeof(fromAddress);
        int receivedBytes = recvfrom(
            clientSocket,
            buffer,
            BUFFER_SIZE - 1, // Leave space for null terminator
            0,
            reinterpret_cast<sockaddr*>(&fromAddress),
            &fromAddressLen
        );

        if (receivedBytes == SOCKET_ERROR) {
            std::cerr << "recvfrom failed: " << WSAGetLastError() << std::endl;
            break;
        }

        buffer[receivedBytes] = '\0'; // Null-terminate received data
        std::cout << "Server response: " << buffer << std::endl;
    }

    // Clean up
    closesocket(clientSocket);
    WSACleanup();
}

int main() {
    const char* serverIP = "127.0.0.1"; // Localhost
    int port = 4000;                   // Port number

    startUDPClient(serverIP, port);

    return 0;
}
